// Day 1 

What is the the goals of a good Programmer ? 

1. Solving Problems 
2. Writing good code - Maintable , simple and clean code 
3. Optimised code 

A programmer writes code for humans so He/ she should write clean code so that either team or future self 
will not face problmes 



Priciples to write standard code 

1. DRY Principle - Don't Repeat Yourself 

     This will reduce the code length 
     Less lines - clean code 

    and it solve the code smell problem 
     
   Code Smell - A tremonalogy that indicates some problem in your code. 


A programmer can solve the code duplication Problem by Writing Methods . And this process is called refactoring. 


Refactoring - Changing the code for better without changing the behaviour . 



2. KISS Principle - Keep It Simple Stupid  
                    
              untages complex code 
              Easier to read code 




3. SOLID Principle - 
      
     1.   S- Single Responsiblity Principle 
     2.   O - Open Closed Principle 
     3.   L - Liskov Substitution Principle 
     4 .  I - Interface Segregation Principle 
     5.   D - Dependency Inversion Principle 




1.  Single Responsiblity Principle- A class should have only one responsiblity 
 

  Advantage-  1. Breaking the code into multiple classes . 
              2. Less code to read for your class 
              3. easy to maintain 
              4. Reusablity - each class has one responsiblity so that we can use when it is needed. 

  Disadvantage - 1. Number of files should increses if we break every funtion into classes so do it wisely 
                 2. Affects the folder Structure. 
                 3. breaking up the classes unnecssary can lead to the issues. 



2. Open Closed Principle - classes/ modules / functions / should be open for extension but closed for modification. 

                          means that if we want to add someting to the program then it should not affect the older function so that we don't need to rewrite the program in future . 


we can use inheritance inheritance allows us to change the funtion and properties without changing the base class. Method Overriding allows us to extend. We can Override in sunclass and super class is not affected. 



Pros-  1. Allows reusablity 
       2. classes we can use extend the functionality of super class without modifying it . 



3. Liskov Substition Principle - 
  
 objects of the super class should be replaceable with the objects of its subclasses without breaking the application. 
Make sure that child class functions are 100 percent compitible with parent class (return type must be same )



4. Interface Segration Principle - Programmers should not be forced to depend upon interfaces that they donot use. 
     
 (In interface the abstract methods are present which have to implement in the child class so divide the interface wisely so that child classes 
  forcefully do not need to implement the methods)



5. Depending Inversion Principle - 

     High level classes should not depend on low level classes both should depend on abstraction 
     Abstraction should not depend on details  , details should depend on abstraction. 



// Day2 

4. CUPID Principle -  It is similar like solid Principle 

    C - Composable - easy to use and resue PlayWell with others 
    U-  Unix Philosophy -  do onething and do it well 
    P-  Predicatble -  Does what you expect to do 
    I - Idiomatic -  code should feel natural 
    D-  Domain Based - using the right keywords 



  
Singleton Design Pattern- 
 
 Design Pattern that restricts the instantiatuin of the class to only one object single object 
 The instatnce will remain same throught the lifetime of application 

 code is present 




Client Server Model- 

Request sent through internet 

        request
 user ------------> internet ----> server 
      <------------          <----- 
        response 

 
 DNS(Domain Name System) - 
    
       user entres the url 
      -> Browers request the DNS server 
      -> DNS server lookup for the address
      -> Browser sends HTTP/HTTPS requests 
      -> response from the server         
        
   
     example- pw.live 


 Problems- 

 1. Single Point failure - If server goes down , service unavailable that will give bad experience to users 

 2. Server Overloaded-  Limitation on the number of request that a server can handle 

  
Solution-

1.  Increase the number of servers -> Horizontal Scaling 

2. Load Balancer - 

   ->  load balancer handles multiple requests 
  ->   shares the request across multiple servers 
 ->  if one of the server goes down service will still continue 
->  it can minimize server response time 
-> Continous health checkup for servers 
 



   Load Balancing Algorithms -> 
        1. Round Robin Algorithm - Request are distributed across the servers in a sequential or rottional mmanner 

            one limitation is that it will doesn't consider the load which is already present on the server which creates the risk of single 
            server overloading. 
   
          2. Least Connection Method -> it will check the number of request already present on the server and sent the request to the which 
                                         has less number of request 

        expensive as L.B needs to identify the server with fewest request  




// Day 3 of 100daysOfCode 


Network Protocols - 

set of rules for data communication between different devices in a network. 


Protocols determine - 1. what is being communicated ? 
                      2. How it is being communicated ? 
                      3. When it is being communicated ? 

 
1. TCP/IP - (Information Protocol)
             (Transmission Control Protocol) 

-> This establish connection between devices
-> Connection Oriented Protocol 
-> Helps in exchange of messages between devieces 

example - Email     


2. HTTP(Hyper Text Transfer Protocol) - 

 -> works on client server model 
-> Most of the data sharing on web is done using HTTP 
-> Transfering Hyper Text between two systems 


3. SMTP - (Simple mail transfer Protocol) - 

  used to send email(tansfer email )  

 First TCP connection to SMTP server is established after successful connection mail is sent 



4. POP(Post Office Protocol) - 

  used for retriving emails from the server 
-> We can read e mail offline 
-> requires internet only for fetching email 
-> No backUp 


5. IMAP(Internet Message Access Protocol) - 

       Messages are stored on the mail server 
-> have backUp 
-> establish a connection between client and mail server 
-> only renders a copy of the messagesthe original stays securely on the server 


6. FTP - 

-> used for transfering files from server to client and vice versa 
-> connection established with TCP/IP 
-> Protocol to enable data transfer 


7. UDP (User Datagram Protocol) - 

     UDP is a connection less protocol 
-> All real time services 
-> Radio, broadCasting , live conferences 
-> No transmission for lost of data protocols 


8> PPP (Point to Point Protocol) 

  used for transfering data between two directly connected devices 




 PortNumber - 

        example 192.67.0.1 : 80   (before semicolon ip address and after that PortNumber )   



Protocols   PortNumber 
FTP            21
SMTP           25 
PPP            110 
IMAP           143 
HTTP           80 
HTTPS          443 
        
   
Latency and Throughput - 


 Latency - The time taken for a packet of data to be transferred accross a network . It is misured in mili seconds 


 Throughput- The quantity of data being sent and received withing unit of time (Measured megaBits/sec(mbps)) or gbps 



Bandwidth- The number of packets of data that can be transfered through the network(Maximum) 


Availablity - Percentage of time the service is available 


  AV    = uptime / totaltime * 100 


   measures avaliblity in 9's 
       90% -   1 nine 
       99% -   2 nine 
       99.9 -  3 nine 
       99.99-  4 nine 

 


Lecture 06 

 
caching - 

 Storing frequently accessed data in a location that is easily and quickely accessible 
 
-> Purpose is to improve performance 
-> reduce the amount of time taken to access the data 
-> data is stored closer to the user application 


Types of caching - 

1. DataBase Caching - the internal catch used for avoding repeated quaries 

    database caching algorithm stores the data in key-value pairs in hashtable 

2. Memory Caching - Ram is used for storing cached data 

3. Web Caching - example chrome 

         1. web client 
         2. web server 



 Disadvantage of caching - 

 1. cache algorith are hard and complex to implement 
 2. Increases the complexity of the program 
 3. high maintance cost 


  
 Database - 

 1. Master-slave algorithm  - 

       slave are copy of master 
 -> read quaries are handled by slaves 
-> write quaries are handled by masters 


  
 Advantages - 

  1. If Master database crashes we have copy 
  2. scaling application 
  3. improves performance 

  Disadvantage - 

      write operation to master are hard to scale  



 
2. Database Indexing - On the basis of primary key 





3. Database replication - (Horizontal scaling ) 

      1. used to keep backup 
      2. used to scale 


4. Database Partitioning- Spliting the subset of data withing the same instance 
                            example - computer drives 


5. Database Sharding - Method of distriibting data across multiple machines  






   
 

 

      
